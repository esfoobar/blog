<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JungleG Blog</title><link>http://jungleg.com/</link><description></description><atom:link href="http://jungleg.com/feeds/jorge-escobar.rss.xml" rel="self"></atom:link><lastBuildDate>Mon, 28 Jul 2014 12:21:00 -0400</lastBuildDate><item><title>Why Use a Static Site Generator Instead of a BloggingÂ Platform</title><link>http://jungleg.com/posts/2014/07/why-use-a-static-site-generator/</link><description>&lt;p&gt;&lt;img src="http://jungleg.com/images/posts/2014/07/static-screen.jpeg" width="450" height="300" class="img-thumbnail" alt="Static Screen" /&gt;&lt;/p&gt;
&lt;p&gt;When I started using Wordpress, I thought it was an awesome solution for blogging. It was easy to install and seemed like by just using plugins, you could augment your blog with a lot of features&amp;nbsp;easily.&lt;/p&gt;
&lt;p&gt;That was until I got hacked not only once, but twice. Wordpress and any other database-backed Content Management System suffers from the same security vulnerability: you store the content behind an authorization scheme. There are ways to prevent this (and I even wrote a &lt;a href="https://web.archive.org/web/20100213110721/http://jungleg.com/2009/09/21/feeling-secure-with-the-latest-wordpress-version-think-again-and-7-tips-to-secure-it"&gt;blog post&lt;/a&gt; about it in the previous incarnation of my blog), but the complexity of keeping up to date with all the patches, monitoring bad plugins and other security considerations quickly become pretty overwhelming. The feeling of seeing Viagra ads all over your site is something you don&amp;#8217;t easily&amp;nbsp;shake.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s also the scalability factor: if your site has a mention on Mashable or Hacker News, you can pretty much kiss your website goodbye, as your infrastructure is not designed to withstand hundreds of visits per second, and unless you have some sort of caching layer enabled (which most small blogs don&amp;#8217;t), every page needs to request its content from the database &amp;#8212; and that becomes a bottleneck for the serving of your&amp;nbsp;content.&lt;/p&gt;
&lt;p&gt;When I decided to launch my blog again, I knew I wanted to do it using the new wave of content serving systems: static site&amp;nbsp;generators.&lt;/p&gt;
&lt;h4&gt;What is a static site&amp;nbsp;generator?&lt;/h4&gt;
&lt;p&gt;The idea seems a little bit stange at first. What if instead of generating each post every time the user requests it, we pre-generate &lt;em&gt;all&lt;/em&gt; the posts, write them on the filesystem as static &lt;span class="caps"&gt;HTML&lt;/span&gt;/&lt;span class="caps"&gt;CSS&lt;/span&gt;/JavaScript files and folders and then transmit that content to the remote&amp;nbsp;server?&lt;/p&gt;
&lt;p&gt;But wait, you must be saying, doesn&amp;#8217;t that take a long time? The truth is for most blogs it doesn&amp;#8217;t, and unless you have thousands of posts, regenerating a blog with 1,000 posts takes a few seconds for most generators. But the beautiful thing is that once that content is generated, there are no databases to access, your whole site is just a bunch of files and&amp;nbsp;folders.&lt;/p&gt;
&lt;p&gt;There are many static site generators, but the most important thing to consider in my opinion is how comfortable you are with the technology that powers it. For example, the most popular Ruby static site generator is &lt;a href="http://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;, for Go it&amp;#8217;s &lt;a href="http://hugo.spf13.com/"&gt;Hugo&lt;/a&gt;, but for me, being a Python fanatic, there was not a whole lot of good choices until &lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; came along. For a comprehensive list of static site generators check out &lt;a href="http://staticsitegenerators.net/"&gt;this site&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now of course there are some drawbacks for using a static site generator. For one, there&amp;#8217;s no pretty admin like Wordpress where you have a &lt;span class="caps"&gt;WYSIWYG&lt;/span&gt; editor &amp;#8212; you need to be comfortable editing plain text files on the system. The content file type varies across generators, but most support Markdown, which is a wiki-like spec to style text. Here&amp;#8217;s a handy &lt;a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet"&gt;Markdown cheatsheet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then there&amp;#8217;s all the setup of the system itself and how you transmit content back to your public server. I will go into some of those details in this post, but specifically centered on the Pelican static site&amp;nbsp;generator.&lt;/p&gt;
&lt;h4&gt;Setting up&amp;nbsp;Pelican&lt;/h4&gt;
&lt;p&gt;There&amp;#8217;s a great &lt;a href="http://hackercodex.com/guide/pelican-static-site-generator-install/"&gt;screencast&lt;/a&gt; that goes into the details of how to install Pelican in your system. Go check it out and then come back for some of the things I found&amp;nbsp;useful.&lt;/p&gt;
&lt;p&gt;The Pelican &lt;a href="http://docs.getpelican.com/en/3.4.0/"&gt;documentation&lt;/a&gt; is pretty good, so if you get stuck you can refer to it. The most important thing (as in every other Python project) is to setup a virtual environment for you blog, &lt;code&gt;pip install pelican&lt;/code&gt; to install the Pelican package and using the handy &lt;code&gt;pelican-quickstart&lt;/code&gt;, which, through a series of questions, helps you to setup your initial blog&amp;nbsp;shell.&lt;/p&gt;
&lt;p&gt;The initial look and feel is not great (I really liked &lt;a href="http://octopress.org/"&gt;Octopress&amp;#8217;&lt;/a&gt;, but hey, I&amp;#8217;m not a Ruby guy), but Pelican allows you to install themes, using the command line tool &lt;code&gt;pelican-themes&lt;/code&gt;. I settled on the awesome &lt;a href="https://github.com/DandyDev/pelican-bootstrap3"&gt;pelican-bootstrap3&lt;/a&gt; since I am knowledgeable with the &lt;a href="http://getbootstrap.com/"&gt;Bootstrap framework&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You will need to edit your &lt;code&gt;pelicanconf.py&lt;/code&gt; to your custom needs. Themes also allow you to put custom tags in there. One of the important decisions will be the &lt;span class="caps"&gt;URL&lt;/span&gt; structure, which I go into in the next&amp;nbsp;section.&lt;/p&gt;
&lt;p&gt;Once you have your initial structure, you should initialize a git repository for the folder, as this allows you to have version control of the whole blog and potentially share it with the&amp;nbsp;world.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s also some decision on whether you&amp;#8217;ll use &lt;span class="caps"&gt;FTP&lt;/span&gt;, rsync manually or use Fabric to publish. I elected &lt;a href="http://www.fabfile.org/"&gt;Fabric&lt;/a&gt;, since it gives you a few niceties that I&amp;#8217;ll talk about below in the &amp;#8220;Editing workflow&amp;#8221;&amp;nbsp;section.&lt;/p&gt;
&lt;h4&gt;Folder&amp;nbsp;structure&lt;/h4&gt;
&lt;p&gt;You will notice is that you have two main folders in your blog: &lt;code&gt;content&lt;/code&gt; which holds the files that you will be editing and &lt;code&gt;output&lt;/code&gt; which is the files that Pelican automatically generates using the files on &lt;code&gt;content&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Inside the &lt;code&gt;content&lt;/code&gt; folder, you&amp;#8217;ll see a bunch of folders. There&amp;#8217;s a &lt;code&gt;posts&lt;/code&gt; folder, which stores the blog archive, the &lt;code&gt;pages&lt;/code&gt; folder that will house your more static pages, for example your &amp;#8220;About&amp;#8221; page, &lt;code&gt;images&lt;/code&gt; which will hold all the images and &lt;code&gt;extra&lt;/code&gt; where you can put custom files, like a specific css or js files you want to&amp;nbsp;use.&lt;/p&gt;
&lt;p&gt;I split the &lt;code&gt;posts&lt;/code&gt; and &lt;code&gt;images&lt;/code&gt; folder to follow the archive structure that I put into my &lt;code&gt;pelicanconf.py&lt;/code&gt; configuration. This is what my &lt;span class="caps"&gt;URL&lt;/span&gt; format looks&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ARTICLE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;posts/{date:%Y}/{date:%m}/{slug}/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;posts/{date:%Y}/{date:%m}/{slug}/index.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;category/{slug}&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;category/{slug}/index.html&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;PAGE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;{slug}&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;PAGE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;{slug}/index.html&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;YEAR_ARCHIVE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;posts/{date:%Y}/index.html&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So my &lt;code&gt;posts&lt;/code&gt; folder has &lt;code&gt;2014&lt;/code&gt; in it, and inside I have &lt;code&gt;06&lt;/code&gt; and &lt;code&gt;07&lt;/code&gt; folders (for the June and July posts, which are the months I&amp;#8217;ve blogged so far), and inside those I have the actual Markdown files (for example this post is called &lt;code&gt;Why Use a Static Site Generator.md&lt;/code&gt;).&lt;/p&gt;
&lt;h4&gt;Editing&amp;nbsp;workflow&lt;/h4&gt;
&lt;p&gt;Since I am using fabric to publish my content, I run it on my laptop with two commands on two side-by-side terminal windows. One is &lt;code&gt;fab regenerate&lt;/code&gt; which runs the regeneration script whenever any document changes and on the other window I run &lt;code&gt;fab serve&lt;/code&gt; which enables a simple &lt;span class="caps"&gt;HTTP&lt;/span&gt; server on port 8000 so you can see your&amp;nbsp;changes.&lt;/p&gt;
&lt;p&gt;I then create a new Markdown document with the proper headers. For this blog post, it&amp;#8217;s as&amp;nbsp;follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Why&lt;/span&gt; &lt;span class="n"&gt;Use&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;Static&lt;/span&gt; &lt;span class="n"&gt;Site&lt;/span&gt; &lt;span class="n"&gt;Generator&lt;/span&gt; &lt;span class="n"&gt;Instead&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;Blogging&lt;/span&gt; &lt;span class="n"&gt;Platform&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;07&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blogging&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;staticgenerator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;development&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="n"&gt;Slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;why&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;static&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;generator&lt;/span&gt;
&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Jorge&lt;/span&gt; &lt;span class="n"&gt;Escobar&lt;/span&gt;
&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;published&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can have posts in a &amp;#8220;draft&amp;#8221; status if you want to work on it without publishing it, but since I have a dev environment, I always mark posts as&amp;nbsp;&amp;#8220;published&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Once I&amp;#8217;m ready to put my work out in the world, I just type &lt;code&gt;fab publish&lt;/code&gt;, and the whole blog is regenerated and transmitted via rsync to a folder on my server. The whole process takes less than a&amp;nbsp;second.&lt;/p&gt;
&lt;h4&gt;Is a Static Site Generator a good solution for&amp;nbsp;you?&lt;/h4&gt;
&lt;p&gt;I can see some readers thinking this whole process seems too &amp;#8220;dev&amp;#8221; oriented, and it is completely different from the &lt;span class="caps"&gt;GUI&lt;/span&gt;-based approach of a blog platform like Wordpress, Blogger or Tumblr. But if you&amp;#8217;re willing to give it a try, I feel like since I started using Pelican, I don&amp;#8217;t have a lot of distractions around my writing and I use the same editor I use for coding to write my blog posts. It&amp;#8217;s like going from driving an automatic car to grabbing a sexy stick shift&amp;nbsp;convertible.&lt;/p&gt;
&lt;p&gt;Let me know what you think in the&amp;nbsp;comments.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jorge Escobar</dc:creator><pubDate>Mon, 28 Jul 2014 12:21:00 -0400</pubDate><guid>tag:jungleg.com,2014-07-28:posts/2014/07/why-use-a-static-site-generator/</guid><category>blogging</category><category>static</category><category>generator</category><category>staticgenerator</category><category>development</category><category>pelican</category><category>python</category></item><item><title>My BlogÂ Reboot</title><link>http://jungleg.com/posts/2014/06/my-blog-reboot/</link><description>&lt;p&gt;&lt;img src="http://jungleg.com/images/posts/2014/06/reboot.jpg" width="300" height="300" class="img-thumbnail" alt="Ctrl Alt Del" /&gt;&lt;/p&gt;
&lt;p&gt;For the third time in its history I&amp;#8217;ve decided to relaunch my blog. This time around, I have a new approach that I think will allow me to work on it on a consistent&amp;nbsp;basis.&lt;/p&gt;
&lt;p&gt;After all this time, I still firmly believe it&amp;#8217;s important that we have independent voices and not let the major blog portals own all the&amp;nbsp;conversation.&lt;/p&gt;
&lt;h4&gt;Blogging is important for&amp;nbsp;me&lt;/h4&gt;
&lt;p&gt;I&amp;#8217;ve felt the need to blog for a long time. There are many excuses to not blog &amp;#8212; dozens of more urgent things, work, family obligations. And yet, it&amp;#8217;s an important acitivity that allows me to look back and reflect on things that are happening. It also allows me to connect to people who might learn something from what I write or allow me to learn something from the comments that people leave on the posts or through social&amp;nbsp;media.&lt;/p&gt;
&lt;p&gt;At the end of 2009 my life was thrown into unexpected waters and I was forced to look for a new job. I eventually joined a startup that required 100% of my waking hours and was heads down for almost 4 years while I worked there. My blog was so unattended that I decided to pull the plug and just point it to an &lt;a href="http://about.me/jungleg"&gt;about.me&lt;/a&gt; page. I also decided to try one of the new publishing platforms, &lt;a href="https://medium.com/@jungleG"&gt;Medium&lt;/a&gt;, to see if it had the same feeling of&amp;nbsp;blogging.&lt;/p&gt;
&lt;p&gt;Every time I saw my homepage, my heart would sink. That page was completely &lt;em&gt;not&lt;/em&gt; representative of what I wanted to be seen&amp;nbsp;as.&lt;/p&gt;
&lt;p&gt;This year I left that startup, and I feel like my life is back in balance. Even though there&amp;#8217;s the same amount of work, it does allow me to disconnect when I go&amp;nbsp;home.&lt;/p&gt;
&lt;h4&gt;Sharing my&amp;nbsp;knowledge&lt;/h4&gt;
&lt;p&gt;One of the upsides of going through the startup bootcamp that I experienced for the past 4 years was the amount of new things I learned in both the engineering side and the business side. I intend to share that knowledge on this blog in the coming months. I will blog about server architecture, scalability, responsive design, python and MongoDB (the company I work at today), and random posts about music, &lt;span class="caps"&gt;TV&lt;/span&gt; and&amp;nbsp;movies.&lt;/p&gt;
&lt;h4&gt;New approach to&amp;nbsp;blogging&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;No deadlines: make it feel more like blog all the time, than post every &lt;em&gt;X&lt;/em&gt;&amp;nbsp;days.&lt;/li&gt;
&lt;li&gt;No word counts: you&amp;#8217;re not writing for a magazine or newspaper. Just make sure your idea is expressed well enough and that it&amp;#8217;s worth writing&amp;nbsp;about.&lt;/li&gt;
&lt;li&gt;Write what you feel and be yourself: there&amp;#8217;s no pretending here. You&amp;#8217;re not trying to convey an image, you&amp;#8217;re writing about you know and&amp;nbsp;feel.&lt;/li&gt;
&lt;li&gt;Assume people don&amp;#8217;t know anything, so that people who are beginning to learn about this field can get a real benefit of reading. If a reader is &amp;#8220;above&amp;#8221; what I write about, there are other blogs to&amp;nbsp;read.&lt;/li&gt;
&lt;li&gt;Make it &amp;#8220;pseudo&amp;#8221; real time: the idea is to have more of a diary of my experiences rather than wait until inspiration hits. That means some posts might change over&amp;nbsp;time.&lt;/li&gt;
&lt;li&gt;Don&amp;#8217;t just share links on social media, share links with thoughts around it right here and then post on social&amp;nbsp;media.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I also wanted to pick the right publishing platform for me. I decided I don&amp;#8217;t want to use Wordpress (too much cruft and security issues), or use Medium or Tumblr (they are content silos that profit from my content), so a long time ago I started looking at static site generators. I will write more about that in an upcoming&amp;nbsp;post.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s it for now. I feel good I&amp;#8217;m back and this time I&amp;#8217;m&amp;nbsp;staying.&lt;/p&gt;
&lt;p class="text-muted"&gt;Image courtesy of &lt;a href="http://www.thinkgeek.com/product/e79b/"&gt;ThinkGeek&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jorge Escobar</dc:creator><pubDate>Tue, 10 Jun 2014 16:54:00 -0400</pubDate><guid>tag:jungleg.com,2014-06-10:posts/2014/06/my-blog-reboot/</guid><category>blogging</category></item></channel></rss>